
from bokeh.plotting import figure, show
from bokeh.io import output_notebook
from bokeh.models import ColumnDataSource

# Example latitude and longitude arrays
lats = [0.0, 0.29517709897205946, 0.5853453950864935, 0.7143018395584094, 0.8209302677812006, 0.9248235661899153, 1.0287155746590626, 1.1307838837496682, 1.206995153457041, 1.2832059139003293, 1.3529236084504301, 1.4114780803809175, 1.4725382784823329, 1.5310922784975889, 1.5921519633952161, 1.6468326979577506, 1.7015132443485002, 1.784440411252686, 1.8673669216079325, 1.9502927753574721, 2.0332179724417805, 2.1161425127985733, 1.9545604012633297, 1.7929802188354844, 1.6280700320200383, 1.4623289302656854, 1.296589909564373, 1.1308529696174898, 0.9651181101613068, 0.8002182126430674, 0.6353203639926862, 0.533386380688829, 0.4267891518257923, 0.3121975779734788, 0.19294304954675487, 0.07219028700837238, -0.051559649094063326, -0.17530871927182656, -0.3020548162364976, -0.4301323590879997, -0.5493820637178296, -0.7052700525030718]
lons = [0.0, 0.10743669132198339, 0.21305461658180652, 0.5674197898813416, 0.8604358333853853, 1.1459465410112175, 1.4314660754495643, 1.7119859190466271, 1.9214422946538465, 2.130904725700738, 2.322525955850796, 2.4834667208561134, 2.6513005009845276, 2.8122498959503104, 2.9800930492954967, 3.130404412146331, 3.280719967857831, 3.5087085571198235, 3.736707665965153, 3.9647177729345473, 4.192739356672706, 4.420772895933321, 4.700761237496909, 4.980723748269321, 5.266434107294575, 5.553565037341421, 5.840675966874662, 6.12776930103813, 6.414847444148514, 6.700470322272962, 6.986082902077582, 7.162640352752298, 7.347272707820049, 7.545749911729148, 7.752302769649497, 7.961450938687662, 8.175791660599105, 8.390133299045457, 8.609669616412122, 8.831516970571483, 9.038078152901472, 9.308115761267118]

# Convert lat/lon to Web Mercator projection for Bokeh
def mercator_projection(lat, lon):
    import math
    r_major = 6378137.000
    x = r_major * math.radians(lon)
    scale = x / lon if lon != 0 else 1
    y = r_major * math.log(math.tan(math.pi / 4 + math.radians(lat) / 2)) * scale
    return x, y

# Project lats and lons
merc_x, merc_y = zip(*[mercator_projection(lat, lon) for lat, lon in zip(lats, lons)])

# Create data source
source = ColumnDataSource(data=dict(x=merc_x, y=merc_y))

# Initialize plot

p = figure(title="Lat/Lon Path on Map", x_axis_type="mercator", y_axis_type="mercator",width = 1500, height = 900)
p.add_tile("CartoDB Positron", retina=True)
             

# Plot points and line
#p.line('x', 'y', source=source, line_width=2, color='blue', legend_label="Path")
p.scatter('x', 'y', source=source, size=8, color='red', legend_label="Points")

# Show plot
show(p)
